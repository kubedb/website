<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using Search Guard with Elasticsearch on Run production-grade databases easily on Kubernetes</title>
    <link>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/</link>
    <description>Recent content in Using Search Guard with Elasticsearch on Run production-grade databases easily on Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Search Guard</title>
      <link>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/search_guard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/search_guard/</guid>
      <description>New to KubeDB? Please start here.
 Search Guard Search Guard(®) is an Elasticsearch plugin that offers encryption, authentication, and authorization. It supports fine grained role-based access control to clusters, indices, documents and fields.
 Search Guard authenticates the credentials against the configured authentication backend(s). Search Guard authorizes the user by retrieving a list of the user’s roles from the configured authorization backend  TLS certificates Search Guard relies heavily on the use of TLS, both for the REST and the transport layer of Elasticsearch.</description>
    </item>
    
    <item>
      <title>Search Guard Certificate</title>
      <link>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/certificate/</guid>
      <description>New to KubeDB? Please start here.
 TLS certificates In KubeDB Elasticsearch, keystore and truststore files in JKS format are used instead of certificates and private keys in PEM format.
KubeDB applies same truststore for both transport layer TLS and REST layer TLS.
But, KubeDB distinguishes between the following types of keystore for security purpose.
 transport layer keystore are used to identify and secure traffic between Elasticsearch nodes on the transport layer http layer keystore are used to identify Elasticsearch clients on the REST and transport layer.</description>
    </item>
    
    <item>
      <title>Search Guard Configuration</title>
      <link>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/configuration/</guid>
      <description>New to KubeDB? Please start here.
 Search Guard Configuration Search Guard configuration enables basic flow as follows:
 Search Guard authenticates the credentials against the configured authentication backend(s). Search Guard authorizes the user by retrieving a list of the user’s roles from the configured authorization backend  Roles retrieved from authorization backends are called backend roles.  Search Guard maps the user and backend roles to Search Guard roles.</description>
    </item>
    
    <item>
      <title>Search Guard Use Certificate</title>
      <link>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/use_certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubedb-v2-hugo.firebaseapp.com/docs/0.8.0/guides/elasticsearch/search-guard/use_certificate/</guid>
      <description>New to KubeDB? Please start here.
 Use TLS certificate If enableSSL is set to be true in Elasticsearch object, only HTTPS calls are allowed to database server.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description>
    </item>
    
  </channel>
</rss>