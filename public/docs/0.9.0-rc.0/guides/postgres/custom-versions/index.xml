<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PostgreSQL Custom Versions on Run production-grade databases easily on Kubernetes</title><link>https://kubedb.com/docs/0.9.0-rc.0/guides/postgres/custom-versions/</link><description>Recent content in PostgreSQL Custom Versions on Run production-grade databases easily on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubedb.com/docs/0.9.0-rc.0/guides/postgres/custom-versions/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup Custom PostgresVersions</title><link>https://kubedb.com/docs/0.9.0-rc.0/guides/postgres/custom-versions/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/0.9.0-rc.0/guides/postgres/custom-versions/setup/</guid><description>New to KubeDB? Please start here.
Setting up Custom PostgresVersions PostgresVersions are KubeDB crds that define the docker images KubeDB will use when deploying a postgres database. For more details about PostgresVersion crd, please visit here.
Creating a Custom Postgres Database Image for KubeDB The best way to create a custom image is to build on top of the existing kubedb image.
FROM kubedb/postgres:10.2-v1 ENV TIMESCALEDB_VERSION 0.9.1 RUN set -ex \ &amp;amp;&amp;amp; apk add --no-cache --virtual .</description></item></channel></rss>