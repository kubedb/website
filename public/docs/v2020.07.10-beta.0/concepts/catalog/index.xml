<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KubeDB Catalog | KubeDB on Run production-grade databases easily on Kubernetes</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/</link><description>Recent content in KubeDB Catalog | KubeDB on Run production-grade databases easily on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/index.xml" rel="self" type="application/rss+xml"/><item><title>ElasticsearchVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/elasticsearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/elasticsearch/</guid><description>ElasticsearchVersion What is ElasticsearchVersion ElasticsearchVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for Elasticsearch database deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, an ElasticsearchVersion custom resource will be created automatically for every supported Elasticsearch versions. You have to specify the name of ElasticsearchVersion crd in spec.version field of Elasticsearch crd. Then, KubeDB will use the docker images specified in the ElasticsearchVersion crd to create your expected database.</description></item><item><title>MemcachedVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/memcached/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/memcached/</guid><description>MemcachedVersion What is MemcachedVersion MemcachedVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for Memcached database deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a MemcachedVersion custom resource will be created automatically for every supported Memcached versions. You have to specify the name of MemcachedVersion crd in spec.version field of Memcached crd. Then, KubeDB will use the docker images specified in the MemcachedVersion crd to create your expected database.</description></item><item><title>MongoDBVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/mongodb/</guid><description>MongoDBVersion What is MongoDBVersion MongoDBVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for MongoDB database deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a MongoDBVersion custom resource will be created automatically for every supported MongoDB versions. You have to specify the name of MongoDBVersion crd in spec.version field of MongoDB crd. Then, KubeDB will use the docker images specified in the MongoDBVersion crd to create your expected database.</description></item><item><title>MySQLVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/mysql/</guid><description>MySQLVersion What is MySQLVersion MySQLVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for MySQL database deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a MySQLVersion custom resource will be created automatically for every supported MySQL versions. You have to specify the name of MySQLVersion crd in spec.version field of MySQL crd. Then, KubeDB will use the docker images specified in the MySQLVersion crd to create your expected database.</description></item><item><title>PerconaXtraDBVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/percona-xtradb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/percona-xtradb/</guid><description>PerconaXtraDBVersion What is PerconaXtraDBVersion PerconaXtraDBVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for PerconaXtraDB deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a PerconaXtraDBVersion custom resource will be created automatically for every supported PerconaXtraDB versions. You have to specify the name of PerconaXtraDBVersion object in .spec.version field of PerconaXtraDB object. Then, KubeDB will use the docker images specified in the PerconaXtraDBVersion crd to create your expected PerconaXtraDBVersion instance.</description></item><item><title>PgBouncerVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/pgbouncer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/pgbouncer/</guid><description>PgBouncerVersion What is PgBouncerVersion PgBouncerVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for PgBouncer server deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a PgBouncerVersion custom resource will be created automatically for every supported PgBouncer release versions. You have to specify the name of PgBouncerVersion crd in spec.version field of PgBouncer crd. Then, KubeDB will use the docker images specified in the PgBouncerVersion crd to create your expected PgBouncer instance.</description></item><item><title>PostgresVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/postgres/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/postgres/</guid><description>PostgresVersion What is PostgresVersion PostgresVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for PostgreSQL database deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a PostgresVersion custom resource will be created automatically for every supported PostgreSQL versions. You have to specify the name of PostgresVersion crd in spec.version field of Postgres crd. Then, KubeDB will use the docker images specified in the PostgresVersion crd to create your expected database.</description></item><item><title>ProxySQLVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/proxysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/proxysql/</guid><description>ProxySQLVersion What is ProxySQLVersion ProxySQLVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for ProxySQL deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a ProxySQLVersion custom resource will be created automatically for supported ProxySQL versions. You have to specify the name of ProxySQLVersion object in .spec.version field of ProxySQL object. Then, KubeDB will use the docker images specified in the ProxySQLVersion object to create your ProxySQL instance.</description></item><item><title>RedisVersion</title><link>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/v2020.07.10-beta.0/concepts/catalog/redis/</guid><description>RedisVersion What is RedisVersion RedisVersion is a Kubernetes Custom Resource Definitions (CRD). It provides a declarative configuration to specify the docker images to be used for Redis database deployed with KubeDB in a Kubernetes native way.
When you install KubeDB, a RedisVersion custom resource will be created automatically for every supported Redis versions. You have to specify the name of RedisVersion crd in spec.version field of Redis crd. Then, KubeDB will use the docker images specified in the RedisVersion crd to create your expected database.</description></item></channel></rss>